/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health check endpoint */
        get: operations["HealthController_getHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/provider": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ProviderController_getAllProviders"];
        put?: never;
        post: operations["ProviderController_createProvider"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/provider/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ProviderController_getMe"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["ProviderController_updateProvider"];
        trace?: never;
    };
    "/provider/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ProviderController_getProviderById"];
        put?: never;
        post?: never;
        delete: operations["ProviderController_deleteProvider"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/provider/{providerId}/attachment/{attachmentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["ProviderController_deleteProviderAttachment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/provider/{id}/photo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["ProviderController_deleteProviderPhoto"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UsersController_getMe"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UsersController_getUserById"];
        put?: never;
        post?: never;
        delete: operations["UsersController_deleteUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ServiceRequestController_getAllServiceRequests"];
        put?: never;
        post: operations["ServiceRequestController_createServiceRequest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-request/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["ServiceRequestController_deleteServiceRequest"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-request/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ServiceRequestController_getAllServiceRequestsMe"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-request/me/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ServiceRequestController_getAllServiceRequestsMeById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["ServiceRequestController_updateServiceRequest"];
        trace?: never;
    };
    "/service-request/{serviceRequestId}/attachment/{attachmentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["ServiceRequestController_deleteServiceRequestAttachment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CustomerController_getAllCustomers"];
        put?: never;
        post: operations["CustomerController_createCustomer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CustomerController_getMe"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["CustomerController_updateCustomer"];
        trace?: never;
    };
    "/service-schedule/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ServiceScheduleController_getWeeklyServiceSchedule"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-schedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ServiceScheduleController_getSimpleCalendarSchedule"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer-review": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ReviewController_getAllCustomerReviews"];
        put?: never;
        post: operations["ReviewController_createCustomerReview"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/provider-review": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ReviewController_getAllProviderReviews"];
        put?: never;
        post: operations["ReviewController_createProviderReview"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer-review/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ReviewController_getCustomerReviewById"];
        put?: never;
        post?: never;
        delete: operations["ReviewController_deleteCustomerReview"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/provider-review/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ReviewController_getProviderReviewById"];
        put?: never;
        post?: never;
        delete: operations["ReviewController_deleteProviderReview"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer/me/review": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ReviewController_getMyCustomerReviews"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/provider/me/review": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ReviewController_getMyProviderReviews"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-category": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ServiceCategoryController_getAllServiceCategories"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/request-type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["RequestTypeController_findAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/city": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CityController_findAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profession": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ProfessionController_findAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/specialization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["SpecializationController_findAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/favourite-provider": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["FavouriteProvidersController_getAllFavouriteProviders"];
        put?: never;
        post: operations["FavouriteProvidersController_createFavouriteProvider"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/favourite-provider/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["FavouriteProvidersController_getMyFavouriteProviders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/favourite-provider/me/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["FavouriteProvidersController_deleteFavouriteProvider"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Provider: {
            id: string;
            userId?: string;
            name: string;
            email: string;
            phone: string;
            profession: string;
            address: string;
            town: string;
            city: string;
            country: string;
            facebookLink?: string;
            twitterLink?: string;
            instagramLink?: string;
            rating?: number;
            experience?: string;
            specializations?: string;
            qualifications?: string;
            availability?: string;
            availableDays?: string;
            completedJobs?: number;
            verified?: boolean;
            /** @enum {string} */
            status?: "active" | "inactive" | "suspended" | "pending";
            createdAt: string;
            updatedAt: string;
            createdDate?: string;
            photoUrl?: string;
            attachments?: Record<string, never>[];
        };
        ProviderResponse: {
            providers: components["schemas"]["Provider"][];
        };
        Buffer: Record<string, never>;
        AttachmentDto: {
            id?: string;
            name: string;
            size: number;
            type: string;
            url?: string;
            data: string;
            buffer?: components["schemas"]["Buffer"];
        };
        UpdateProviderDto: {
            userId?: string;
            name?: string;
            email?: string;
            phone?: string;
            profession?: string;
            qualifications?: string;
            street?: string;
            city?: string;
            state?: string;
            zipCode?: string;
            country?: string;
            facebookLink?: string;
            twitterLink?: string;
            instagramLink?: string;
            rating?: number;
            experience?: number;
            specializations?: string;
            availability?: string;
            availableDays?: string;
            completedJobs?: number;
            verified?: boolean;
            /** @enum {string} */
            status?: "active" | "inactive" | "suspended" | "pending";
            photo?: components["schemas"]["AttachmentDto"];
            attachments?: components["schemas"]["AttachmentDto"][];
        };
        CreateProviderDto: {
            name: string;
            phone: string;
            address: string;
            town: string;
            city: string;
            country: string;
            email?: string;
            profession?: string;
            qualifications?: string;
            facebookLink?: string;
            twitterLink?: string;
            instagramLink?: string;
            experience?: string;
            specializations?: string;
            availability?: string;
            availableDays?: string;
            completedJobs?: number;
            createdDate?: string;
            photo?: components["schemas"]["AttachmentDto"];
            attachments?: string[];
        };
        User: {
            id: string;
            auth0Id: string;
            customerId?: string;
            role?: string[];
            providerId?: string;
            email?: string;
            name?: string;
            createdAt: string;
            updatedAt: string;
        };
        ServiceRequest: {
            id: string;
            requestNumber: string;
            customerId: string;
            serviceCategoryId: string;
            /** @enum {string} */
            requestType: "Repair" | "Installation" | "Maintenance" | "Inspection" | "Consultation";
            /** @enum {string} */
            priority: "Critical" | "High" | "Medium" | "Low";
            /** @enum {string} */
            status: "Pending" | "Assigned" | "In Progress" | "Completed" | "Cancelled" | "On Hold";
            description: string;
            location: string;
            serviceStartDate?: string;
            serviceEndDate?: string;
            serviceDuration?: number;
            estimatedDuration?: number;
            actualDuration?: number;
            providerId?: string;
            providerName?: string;
            customerName?: string;
            providerRating?: number;
            customerRating?: number;
            providerNotes?: string;
            customerNotes?: string;
            laborRate?: number;
            laborCost?: number;
            totalCost?: number;
            warrantyCovered?: boolean;
            slaTarget?: number;
            slaActual?: number;
            /** @enum {string} */
            slaStatus?: "Met" | "Missed" | "Pending";
            assignedDate?: string;
            scheduledStartTime?: string;
            scheduledEndTime?: string;
            actualStartTime?: string;
            actualEndTime?: string;
            createdAt: string;
            updatedAt: string;
            attachments?: Record<string, never>[];
        };
        ServiceRequestResponse: {
            serviceRequests: components["schemas"]["ServiceRequest"][];
        };
        CreateUpdateAttachmentDto: {
            name: string;
            size: number;
            type: string;
            url: string;
            data: string;
        };
        CreateServiceRequestDto: {
            id?: string;
            requestNumber?: string;
            customerId?: string;
            serviceCategoryId?: string;
            requestType?: string;
            /** @enum {string} */
            priority?: "Critical" | "High" | "Medium" | "Low";
            description?: string;
            location?: string;
            serviceStartDate?: string;
            serviceEndDate?: string;
            serviceDuration?: number;
            estimatedDuration?: number;
            providerId?: string;
            isFlexibleOnDateAndTime?: string;
            attachments?: components["schemas"]["CreateUpdateAttachmentDto"][];
            status?: string;
        };
        UpdateServiceRequestDto: {
            requestNumber?: string;
            customerId?: string;
            serviceCategoryId?: string;
            /** @enum {string} */
            requestType?: "Repair" | "Installation" | "Maintenance" | "Inspection" | "Consultation";
            /** @enum {string} */
            priority?: "Critical" | "High" | "Medium" | "Low";
            /** @enum {string} */
            status?: "Pending" | "Assigned" | "In Progress" | "Completed" | "Cancelled" | "On Hold";
            description?: string;
            location?: string;
            serviceStartDate?: string;
            serviceEndDate?: string;
            serviceDuration?: number;
            estimatedDuration?: number;
            actualDuration?: number;
            providerId?: string;
            providerNotes?: string;
            customerNotes?: string;
            laborRate?: number;
            laborCost?: number;
            totalCost?: number;
            warrantyCovered?: boolean;
            slaTarget?: number;
            slaActual?: number;
            /** @enum {string} */
            slaStatus?: "Met" | "Missed" | "Pending";
            assignedDate?: string;
            scheduledStartTime?: string;
            scheduledEndTime?: string;
            actualStartTime?: string;
            actualEndTime?: string;
            isFlexibleOnDateAndTime?: string;
        };
        Customer: {
            id: string;
            userId?: string;
            name: string;
            email: string;
            phone: string;
            address: string;
            /** @enum {string} */
            status: "active" | "inactive" | "suspended";
            registrationDate: string;
            totalRequests: number;
            rating?: number;
            verified?: boolean;
            serviceKeywords?: string;
            createdAt: string;
            updatedAt: string;
        };
        CustomerResponse: {
            customers: components["schemas"]["Customer"][];
        };
        UpdateCustomerDto: {
            name: string;
            email: string;
            phone: string;
            address: string;
            serviceKeywords?: string;
        };
        CreateCustomerDto: {
            userId?: string;
            name: string;
            email: string;
            phone?: string;
            address?: string;
            serviceKeywords?: string;
            status?: string;
        };
        ServiceRequestScheduleItem: {
            id: string;
            requestNumber: string;
            providerName: string;
            location: string;
            date: string;
            status: string;
            scheduledStartTime?: string;
            scheduledEndTime?: string;
            description?: string;
        };
        DaySchedule: {
            date: string;
            serviceRequests: components["schemas"]["ServiceRequestScheduleItem"][];
        };
        ServiceScheduleResponse: {
            customerId: string;
            providerId: string;
            fromDate: string;
            toDate: string;
            weekSchedule?: components["schemas"]["DaySchedule"][];
            calendarSchedule?: components["schemas"]["DaySchedule"][];
            serviceRequests?: components["schemas"]["ServiceRequestScheduleItem"][];
        };
        BasicServiceRequest: {
            id: string;
            providerName: string;
            customerName: string;
            location: string;
            status: string;
            description: string;
            dateDuration: string;
        };
        CalendarDaySchedule: {
            date: string;
            requests: components["schemas"]["BasicServiceRequest"][];
        };
        CustomerReview: {
            id: string;
            serviceRequestId: string;
            reviewedBy: string;
            providerId: string;
            rating: number;
            comment?: string;
            date: string;
            createdAt: string;
            updatedAt: string;
        };
        CustomerReviewResponse: {
            reviews: components["schemas"]["CustomerReview"][];
        };
        ProviderReview: {
            id: string;
            serviceRequestId: string;
            reviewedBy: string;
            customerId: string;
            rating: number;
            comment?: string;
            date: string;
            createdAt: string;
            updatedAt: string;
        };
        ProviderReviewResponse: {
            reviews: components["schemas"]["ProviderReview"][];
        };
        CreateCustomerReviewDto: {
            serviceRequestId: string;
            providerId: string;
            rating: number;
            comment?: string;
        };
        CreateProviderReviewDto: {
            serviceRequestId: string;
            customerId: string;
            rating: number;
            comment?: string;
        };
        ServiceCategory: {
            id: string;
            name: string;
            description?: string;
            baseRate: number;
            estimatedDuration: number;
            createdAt: string;
            updatedAt: string;
        };
        ServiceCategoryResponse: {
            serviceCategories: components["schemas"]["ServiceCategory"][];
        };
        RequestType: {
            id: string;
            name: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        City: {
            id: string;
            name: string;
            province: string;
            district: string;
            latitude?: number;
            longitude?: number;
            population?: number;
            isActive?: boolean;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        Profession: {
            id: string;
            name: string;
            description?: string;
            category: string;
            baseRate?: number;
            requiresLicense?: boolean;
            requiresCertification?: boolean;
            isActive?: boolean;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        Specialization: {
            id: string;
            name: string;
            description?: string;
            professionId: string;
            baseRate?: number;
            estimatedDuration?: number;
            requiresCertification?: boolean;
            requiresEquipment?: boolean;
            isActive?: boolean;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        FavouriteProviderResponse: {
            id: string;
            customerId: string;
            providerId: string;
            providerName: string;
            photoUrl: string;
            specializations: string;
            phone: string;
            createdAt: string;
            updatedAt: string;
        };
        CreateFavouriteProviderDto: {
            providerId: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    HealthController_getHealth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service is healthy */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example ok */
                        status?: string;
                        /** @example 2025-02-09T12:55:46.000Z */
                        timestamp?: string;
                        /** @example 123.456 */
                        uptime?: number;
                        /** @example development */
                        environment?: string;
                        /** @example 1.0.0 */
                        version?: string;
                    };
                };
            };
        };
    };
    ProviderController_getAllProviders: {
        parameters: {
            query?: {
                "search-term"?: string;
                profession?: string;
                city?: string;
                town?: string;
                specialization?: string;
                rating?: number;
                experience?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProviderResponse"];
                };
            };
        };
    };
    ProviderController_createProvider: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateProviderDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Provider"];
                };
            };
        };
    };
    ProviderController_getMe: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Provider"];
                };
            };
        };
    };
    ProviderController_updateProvider: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProviderDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Provider"];
                };
            };
        };
    };
    ProviderController_getProviderById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Provider"];
                };
            };
        };
    };
    ProviderController_deleteProvider: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProviderController_deleteProviderAttachment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                providerId: string;
                attachmentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProviderController_deleteProviderPhoto: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_getMe: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    UsersController_getUserById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    UsersController_deleteUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ServiceRequestController_getAllServiceRequests: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ServiceRequestController_createServiceRequest: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateServiceRequestDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceRequest"];
                };
            };
        };
    };
    ServiceRequestController_deleteServiceRequest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ServiceRequestController_getAllServiceRequestsMe: {
        parameters: {
            query?: {
                requesterType?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceRequestResponse"];
                };
            };
        };
    };
    ServiceRequestController_getAllServiceRequestsMeById: {
        parameters: {
            query?: {
                requesterType?: string;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceRequestResponse"];
                };
            };
        };
    };
    ServiceRequestController_updateServiceRequest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateServiceRequestDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceRequest"];
                };
            };
        };
    };
    ServiceRequestController_deleteServiceRequestAttachment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serviceRequestId: string;
                attachmentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CustomerController_getAllCustomers: {
        parameters: {
            query?: {
                id?: string;
                name?: string;
                email?: string;
                status?: string;
                phone?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerResponse"];
                };
            };
        };
    };
    CustomerController_createCustomer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCustomerDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Customer"];
                };
            };
        };
    };
    CustomerController_getMe: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Customer"];
                };
            };
        };
    };
    CustomerController_updateCustomer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCustomerDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Customer"];
                };
            };
        };
    };
    ServiceScheduleController_getWeeklyServiceSchedule: {
        parameters: {
            query: {
                from: string;
                to: string;
                customerId?: string;
                providerId?: string;
                status?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceScheduleResponse"];
                };
            };
        };
    };
    ServiceScheduleController_getSimpleCalendarSchedule: {
        parameters: {
            query: {
                from: string;
                to: string;
                status?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CalendarDaySchedule"][];
                };
            };
        };
    };
    ReviewController_getAllCustomerReviews: {
        parameters: {
            query?: {
                serviceRequestId?: string;
                reviewedBy?: string;
                providerId?: string;
                rating?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerReviewResponse"];
                };
            };
        };
    };
    ReviewController_createCustomerReview: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCustomerReviewDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerReview"];
                };
            };
        };
    };
    ReviewController_getAllProviderReviews: {
        parameters: {
            query?: {
                serviceRequestId?: string;
                reviewedBy?: string;
                customerId?: string;
                rating?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProviderReviewResponse"];
                };
            };
        };
    };
    ReviewController_createProviderReview: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateProviderReviewDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProviderReview"];
                };
            };
        };
    };
    ReviewController_getCustomerReviewById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerReview"];
                };
            };
        };
    };
    ReviewController_deleteCustomerReview: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ReviewController_getProviderReviewById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProviderReview"];
                };
            };
        };
    };
    ReviewController_deleteProviderReview: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ReviewController_getMyCustomerReviews: {
        parameters: {
            query?: {
                providerId?: string;
                serviceRequestId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerReviewResponse"];
                };
            };
        };
    };
    ReviewController_getMyProviderReviews: {
        parameters: {
            query?: {
                customerId?: string;
                serviceRequestId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProviderReviewResponse"];
                };
            };
        };
    };
    ServiceCategoryController_getAllServiceCategories: {
        parameters: {
            query?: {
                id?: string;
                name?: string;
                baseRate?: string;
                estimatedDuration?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceCategoryResponse"];
                };
            };
        };
    };
    RequestTypeController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RequestType"][];
                };
            };
        };
    };
    CityController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["City"][];
                };
            };
        };
    };
    ProfessionController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Profession"][];
                };
            };
        };
    };
    SpecializationController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Specialization"][];
                };
            };
        };
    };
    FavouriteProvidersController_getAllFavouriteProviders: {
        parameters: {
            query?: {
                customerId?: string;
                providerId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FavouriteProviderResponse"][];
                };
            };
        };
    };
    FavouriteProvidersController_createFavouriteProvider: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateFavouriteProviderDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FavouriteProviderResponse"];
                };
            };
        };
    };
    FavouriteProvidersController_getMyFavouriteProviders: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FavouriteProviderResponse"][];
                };
            };
        };
    };
    FavouriteProvidersController_deleteFavouriteProvider: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
